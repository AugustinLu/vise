# -*- coding: utf-8 -*-

import os
from pathlib import Path
import pytest
import tempfile

from pymatgen import Structure

from vise.input_set.input_set import ViseInputSet
from vise.input_set.xc import Xc

structure = Structure(
    lattice=[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]],
    species=["H"],
    coords=[[0.0, 0.0, 0.0]])


@pytest.fixture
def simple_structure():
    return structure


@pytest.fixture
def input_set():
    return ViseInputSet(structure=structure, xc=Xc.hse)


def test_incar(input_set):
    expected = """# algorithm
ALGO  =  D

# accuracy
PREC   =  N
LREAL  =  False
EDIFF  =  1e-07
ENCUT  =  325.0
LASPH  =  True
NELM   =  100

# ionic relaxation
ISIF    =  3
IBRION  =  2
EDIFFG  =  -0.005
NSW     =  50
TIME    =  0.4

# occupation
ISMEAR  =  0
SIGMA   =  0.1

# spin
ISPIN  =  1

# IO control
LWAVE   =  True
LCHARG  =  False

# analyzer
LORBIT  =  12

# hybrid functional
LHFCALC   =  True
PRECFOCK  =  Fast
AEXX      =  0.25
HFSCREEN  =  0.208

# parallel
KPAR  =  4"""

    assert str(input_set.incar) == expected


def test_kpoints(input_set):
    expected = """Generated by vise. Mode: primitive, kpt density: 2.5, factor: 1.
0
Gamma
16 16 16
0.5 0.5 0.5
"""
    assert str(input_set.kpoints) == expected


def test_poscar(input_set):
    expected = """H1
1.0
1.000000 0.000000 0.000000
0.000000 1.000000 0.000000
0.000000 0.000000 1.000000
H
1
direct
0.000000 0.000000 0.000000 H
"""
    assert str(input_set.poscar) == expected


def test_potcar(input_set):
    assert input_set.potcar.symbols == ["H"]

#
# def test_write(input_set):
#     with tempfile.TemporaryDirectory() as tmp_dirname:
#         os.chdir(tmp_dirname)
#         input_set.create_input(output_dir=tmp_dirname)
#         os.remove("INCAR")
#         os.remove("POSCAR")
#         os.remove("POTCAR")
#         os.remove("KPOINTS")
# #        os.remove("vise.json")
#         Path.cwd()  # may be safer to go back to cwd


# def test_dict(input_set):
#     expected = input_set.as_dict()
#     actual = ViseInputSet.from_dict(expected).as_dict()
#     assert actual == expected


# def test_from_prev_calc_with_parsing_results(mocker, input_set):
#     mocker.patch("vise.input_set.input_set.loadfn",
#                  return_value=input_set)
#
#     mocker.patch("vise.input_set.input_set.get_vasprun_outcar",
#                  return_value=("a", "b"))
#     mocker.patch("vise.input_set.input_set.get_structure_from_prev_run",
#                  return_value=structure)
#
#     gap_properties = None, {"energy": 0.0}, {"energy": 1.0}
#     mocker.patch("vise.input_set.input_set.band_gap_from_vasp",
#                  return_value=gap_properties)
#
#     input_set = ViseInputSet.from_prev_calc(dirname="dirname",
#                                             parse_incar=False)
#     expected = """Vise version: 0.1.13
# task: structure_opt
# xc: hse
# potcar: ['H']
# kwargs:
#   sort_structure            : True
#   standardize_structure     : False
#   kpt_mode                  : primitive
#   kpt_density               : 2.5
#   kpt_shift                 : None
#   only_even                 : False
#   band_ref_dist             : 0.025
#   factor                    : None
#   symprec                   : 0.01
#   angle_tolerance           : 5
#   dos_step_size             : 0.01
#   charge                    : 0.0
#   potcar_set_name           : normal
#   override_potcar_set       : None
#   vbm_cbm                   : [0.0, 1.0]
#   aexx                      : 0.25
#   hubbard_u                 : None
#   ldauu                     : None
#   ldaul                     : None
#   ldaul_set_name            : default
#   npar_kpar                 : True
#   encut                     : None
#   is_magnetization          : False
#   num_nodes                 : 1
#   structure_opt_encut_factor: 1.3                       """
#
#     assert str(input_set) == expected
#

